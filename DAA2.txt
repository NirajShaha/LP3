from collections import Counter

class nodetree(object):

    def __init__(self,left = None,right = None):
        self.left = left
        self.right = right

    def children(self):
        return self.left,self.right

    def __str__(self):
        return self.left,self.right

def huffmantree(node,binString=''):
    if type(node) is str:
        return {node : binString}

    (l,r) = node.children()
    d = dict()
    d.update(huffmantree(l,binString+'0'))
    d.update(huffmantree(r,binString+'1'))
    return d

def maketree(nodes):
    while len(nodes)>1:
        (key1,c1) = nodes[-1]
        (key2,c2) = nodes[-2]
        nodes = nodes[:-2]
        node = nodetree(key1,key2)
        nodes.append((node,c1+c2))
        nodes = sorted(nodes,key = lambda x:x[1],reverse=True)

    return nodes[0][0]

if __name__ == '__main__':
    string = 'BCAADDDCCACACAC'
    freq = dict(Counter(string))
    print("gf:",freq)
    freq = sorted(freq.items(), key=lambda x:x[1],reverse=True)
    print("sf:",freq)
    node = maketree(freq)
    encoding = huffmantree(node)
    for i in encoding:
        print(F'{i} : {encoding[i]}')